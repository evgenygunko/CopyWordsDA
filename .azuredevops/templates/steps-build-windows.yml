steps:
    - task: DownloadSecureFile@1
      displayName: '[Windows] Download code signing certificate'
      inputs:
          secureFile: 'cert.pfx'
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

    # On a private agent we don't need this
    - task: PowerShell@2
      displayName: '[Windows] Install Signing Certficiate'
      inputs:
          targetType: 'inline'
          script: |
              $password = "$(SIGNING_CERTIFICATE_PASSWORD)" | ConvertTo-SecureString -Force -AsPlainText
              Import-PfxCertificate -FilePath "$(Agent.TempDirectory)/cert.pfx" -CertStoreLocation Cert:\CurrentUser\My -Password $password
      condition: and(succeeded(), eq(variables['Agent.Name'], 'Hosted Agent'), eq(variables['Agent.OS'], 'Windows_NT'))

    - task: PowerShell@2
      displayName: '[Windows] Convert .pfx to .cer'
      inputs:
          targetType: 'inline'
          script: |
              # Define paths
              $pfxPath = "$(Agent.TempDirectory)/cert.pfx"
              $cerPath = "$(Build.ArtifactStagingDirectory)/cert.cer"

              # Secure password conversion
              $password = "$(SIGNING_CERTIFICATE_PASSWORD)" | ConvertTo-SecureString -Force -AsPlainText

              # Load the .pfx file and export as .cer
              $certificate = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
              $certificate.Import($pfxPath, $password, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable)

              # Export the .cer file
              $cerBytes = $certificate.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert)
              [System.IO.File]::WriteAllBytes($cerPath, $cerBytes)

              Write-Output "Certificate exported to $cerPath"
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
          command: 'test'
          projects: '**/*Tests.csproj'
          arguments: '--configuration $(BUILD_CONFIGURATION) --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
          publishTestResults: true

    # On MacOS building a release configuration hangs (due to a bug in donet?), so we only run publish task on Windows
    - task: DotNetCoreCLI@2
      displayName: '[Windows] dotnet publish: CopyWords.MAUI.csproj'
      inputs:
          command: 'publish'
          publishWebProjects: false
          projects: '**/CopyWords.MAUI.csproj'
          arguments: '-c:$(BUILD_CONFIGURATION) -f $(FRAMEWORK_WINDOWS) -p:RuntimeIdentifierOverride=win10-x64'
          zipAfterPublish: false
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

    - task: CopyFiles@2
      displayName: '[Windows] Copy build output to artifact staging directory'
      inputs:
          SourceFolder: './source/CopyWords.MAUI/bin/'
          Contents: |
              **/CopyWords*.msix
          TargetFolder: '$(build.artifactstagingdirectory)/windows'
          flattenFolders: true
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))
